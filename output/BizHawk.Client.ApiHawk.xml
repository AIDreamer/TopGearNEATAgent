<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BizHawk.Client.ApiHawk</name>
    </assembly>
    <members>
        <member name="T:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute">
            <summary>
            This class hold logic interraction for the BizHawkExternalToolUsageAttribute
            This attribute helps ApiHawk to know how a tool can be enabled or not
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute.#ctor(BizHawk.Client.ApiHawk.BizHawkExternalToolUsage,BizHawk.Client.ApiHawk.CoreSystem,System.String)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute"/>
            </summary>
            <param name="usage"><see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolUsage"/> i.e. what your external tool is for</param>
            <param name="system"><see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> that your external tool is used for</param>
            <param name="gameHash">The game hash, unique game ID (see in the game database)</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute.#ctor(BizHawk.Client.ApiHawk.BizHawkExternalToolUsage,BizHawk.Client.ApiHawk.CoreSystem)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute"/>
            </summary>
            <param name="usage"><see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolUsage"/> i.e. what your external tool is for</param>
            <param name="system"><see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> that your external tool is used for</param>		
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute"/>
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute.System">
            <summary>
            Gets the specific system used by the exetrnal tool
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute.GameHash">
            <summary>
            Gets the specific game (hash) used by the exetrnal tool
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.BizHawkExternalToolUsageAttribute.ToolUsage">
            <summary>
            Gets the tool usage
            </summary>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute">
            <summary>
            This class hold logic interraction for the ExternalToolAttribute
            This attribute helps BizHawk to handle ExternalTools
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute"/>
            </summary>
            <param name="name">Tool's name</param>
            <param name="description">Small description about the tool itself</param>
            <param name="iconResourceName">Icon embedded resource name</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute"/>
            </summary>
            <param name="name">Tool's name</param>
            <param name="description">Small description about the tool itself</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute"/>
            </summary>
            <param name="name">Tool's name</param>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute.Name">
            <summary>
            Gets tool's friendly name
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute.Description">
            <summary>
            Gets tool's descriptino
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute.IconResourceName">
            <summary>
            Get the name of the embedded resource icon
            </summary>
            <remarks>Don't forget to set compile => Embedded reource to the icon file in your project</remarks>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.BizHawkSystemIdToEnumConverter">
            <summary>
            This class holds a converter for BizHawk SystemId (which is a simple <see cref="T:System.String"/>
            It allows you to convert it to a <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> value and vice versa
            </summary>
            <remarks>I made it this way just in case one day we need it for WPF (DependencyProperty binding). Just uncomment :IValueConverter implementation
            I didn't implemented it because of mono compatibility
            </remarks>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkSystemIdToEnumConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert BizHawk SystemId <see cref="T:System.String"/> to <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> value
            </summary>
            <param name="value"><see cref="T:System.String"/> you want to convert</param>
            <param name="targetType">The type of the binding target property</param>
            <param name="parameter">The converter parameter to use; null in our case</param>
            <param name="cultureInfo">The culture to use in the converter</param>
            <returns>A <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> that is equivalent to BizHawk SystemId <see cref="T:System.String"/></returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when SystemId hasn't been found</exception>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkSystemIdToEnumConverter.Convert(System.String)">
            <summary>
            Convert BizHawk SystemId <see cref="T:System.String"/> to <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> value
            </summary>
            <param name="value"><see cref="T:System.String"/> you want to convert</param>
            <returns>A <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> that is equivalent to BizHawk SystemId <see cref="T:System.String"/></returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when SystemId hasn't been found</exception>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkSystemIdToEnumConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> value to BizHawk SystemId <see cref="T:System.String"/>
            </summary>
            <param name="value"><see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> you want to convert</param>
            <param name="targetType">The type of the binding target property</param>
            <param name="parameter">The converter parameter to use; null in our case</param>
            <param name="cultureInfo">The culture to use in the converter</param>
            <returns>A <see cref="T:System.String"/> that is used by BizHawk SystemId</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> hasn't been found</exception>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.BizHawkSystemIdToEnumConverter.ConvertBack(BizHawk.Client.ApiHawk.CoreSystem)">
            <summary>
            Convert a <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> value to BizHawk SystemId <see cref="T:System.String"/>
            </summary>
            <param name="value"><see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> you want to convert</param>
            <returns>A <see cref="T:System.String"/> that is used by BizHawk SystemId</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <see cref="T:BizHawk.Client.ApiHawk.CoreSystem"/> hasn't been found</exception>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickLoadEventArgs">
            <summary>
            This class holds event data for BeforeQuickLoad event
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickLoadEventArgs.Handled">
            <summary>
            Gets or sets value that defined if saved has been handled or not
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickLoadEventArgs.Name">
            <summary>
            Gets quicksave name
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickLoadEventArgs.Slot">
            <summary>
            Gets slot used for quicksave
            </summary>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickSaveEventArgs">
            <summary>
            This class holds event data for BeforeQuickSave event
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickSaveEventArgs.Handled">
            <summary>
            Gets or sets value that defined if saved has been handled or not
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickSaveEventArgs.Name">
            <summary>
            Gets quicksave name
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickSaveEventArgs.Slot">
            <summary>
            Gets slot used for quicksave
            </summary>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Classes.Events.StateSavedEventArgs">
            <summary>
            This class holds event data for StateSaved event
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.Classes.Events.StateSavedEventArgs.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.Classes.Events.StateSavedEventArgs"/>
            </summary>
            <param name="stateName">User friendly name of loaded state</param>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Classes.Events.StateSavedEventArgs.Name">
            <summary>
            Gets user friendly name of the loaded savestate
            </summary>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Classes.Events.StateLoadedEventArgs">
            <summary>
            This class holds event data for StateLoaded event
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.Classes.Events.StateLoadedEventArgs.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.Classes.Events.StateLoadedEventArgs"/>
            </summary>
            <param name="stateName">User friendly name of loaded state</param>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Classes.Events.StateLoadedEventArgs.Name">
            <summary>
            Gets user friendly name of the loaded savestate
            </summary>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickLoadEventHandler">
            <summary>
            Represent a method that will handle the event raised before a quickload is done
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Classes.Events.BeforeQuickSaveEventHandler">
            <summary>
            Represent a method that will handle the event raised before a quicksave is done
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Classes.Events.StateLoadedEventHandler">
            <summary>
            Represent a method that will handle the event raised when a savestate is loaded
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Classes.Events.StateSavedEventHandler">
            <summary>
            Represent a method that will handle the event raised when a savestate is saved
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.Joypad">
            <summary>
            This class holds a joypad for any type of console
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.Joypad.#ctor(BizHawk.Client.Common.SystemInfo,System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:BizHawk.Client.ApiHawk.Joypad"/>
            </summary>
            <param name="system">What <see cref="T:BizHawk.Client.Common.SystemInfo"/> this <see cref="T:BizHawk.Client.ApiHawk.Joypad"/> is used for</param>
            <param name="player">Which player this controller is assigned to</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.Joypad.AddInput(BizHawk.Client.ApiHawk.JoypadButton)">
            <summary>
            Add specified input to current ones
            </summary>
            <param name="input">Input to add</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.Joypad.ClearInputs">
            <summary>
            Clear inputs
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.Joypad.RemoveInput(BizHawk.Client.ApiHawk.JoypadButton)">
            <summary>
            Remove specified input to current ones
            </summary>
            <param name="input">Input to remove</param>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Joypad.AnalogX">
            <summary>
            Gets or sets X value for Analog stick
            </summary>
            <remarks>The value you get will aways be rounded to 0 decimal</remarks>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Joypad.AnalogY">
            <summary>
            Gets or sets Y value for Analog stick
            </summary>
            <remarks>The value you get will aways be rounded to 0 decimal</remarks>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Joypad.Inputs">
            <summary>
            Gets or sets inputs
            If you pass inputs unavailable for current system, they'll be removed
            </summary>
            <remarks>It overrides all existing inputs</remarks>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.Joypad.System">
            <summary>
            Gets <see cref="T:BizHawk.Client.Common.SystemInfo"/> for current <see cref="T:BizHawk.Client.ApiHawk.Joypad"/>
            </summary>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.JoypadStringToEnumConverter">
            <summary>
            This class holds a converter for BizHawk joypad buttons (which is a simple <see cref="T:System.String"/>
            It allows you to convert it to a <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> value and vice versa
            </summary>
            <remarks>I made it this way just in case one day we need it for WPF (DependencyProperty binding). Just uncomment :IValueConverter implementation
            I didn't implemented it because of mono compatibility
            </remarks>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.JoypadStringToEnumConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert BizHawk button <see cref="T:System.String"/> to <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> value
            </summary>
            <param name="value"><see cref="T:System.String"/> you want to convert</param>
            <param name="targetType">The type of the binding target property</param>
            <param name="parameter">The converter parameter to use; null in our case</param>
            <param name="cultureInfo">The culture to use in the converter</param>
            <returns>A <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> that is equivalent to BizHawk <see cref="T:System.String"/> button</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when SystemId hasn't been found</exception>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.JoypadStringToEnumConverter.Convert(System.String)">
            <summary>
            Convert BizHawk button <see cref="T:System.String"/> to <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> value
            </summary>
            <param name="value"><see cref="T:System.String"/> you want to convert</param>
            <returns>A <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> that is equivalent to BizHawk <see cref="T:System.String"/> button</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when SystemId hasn't been found</exception>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.JoypadStringToEnumConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> value to BizHawk <see cref="T:System.String"/>
            </summary>
            <param name="value"><see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> you want to convert</param>
            <param name="targetType">The type of the binding target property</param>
            <param name="parameter">In our case, we pass the <see cref="T:BizHawk.Client.Common.SystemInfo"/></param>
            <param name="cultureInfo">The culture to use in the converter</param>
            <returns>A <see cref="T:System.String"/> that is used by BizHawk</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> hasn't been found</exception>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.JoypadStringToEnumConverter.ConvertBack(BizHawk.Client.ApiHawk.JoypadButton,BizHawk.Client.Common.SystemInfo)">
            <summary>
            Convert a <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> value to BizHawk <see cref="T:System.String"/>
            </summary>
            <param name="button"><see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> you want to convert</param>
            <param name="system">Current <see cref="T:BizHawk.Client.Common.SystemInfo"/></param>
            <returns>A <see cref="T:System.String"/> that is used by BizHawk</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <see cref="T:BizHawk.Client.ApiHawk.JoypadButton"/> hasn't been found</exception>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.BizHawkExternalToolUsage">
            <summary>
            This enum describe how an external tool is handled
            </summary>
        </member>
        <member name="F:BizHawk.Client.ApiHawk.BizHawkExternalToolUsage.Global">
            <summary>
            General usage, works even with null emulator
            </summary>
        </member>
        <member name="F:BizHawk.Client.ApiHawk.BizHawkExternalToolUsage.EmulatorSpecific">
            <summary>
            Specific to an emulator (NES,SNES,etc...)
            </summary>
        </member>
        <member name="F:BizHawk.Client.ApiHawk.BizHawkExternalToolUsage.GameSpecific">
            <summary>
            Specific to a Game
            </summary>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.ClientApi">
            <summary>
            This class contains some methods that
            interract with BizHawk client
            </summary>
        </member>
        <member name="E:BizHawk.Client.ApiHawk.ClientApi.BeforeQuickLoad">
            <summary>
            Occurs before a quickload is done (just after user has pressed the shortcut button
            or has click on the item menu)
            </summary>
        </member>
        <member name="E:BizHawk.Client.ApiHawk.ClientApi.BeforeQuickSave">
            <summary>
            Occurs before a quicksave is done (just after user has pressed the shortcut button
            or has click on the item menu)
            </summary>
        </member>
        <member name="E:BizHawk.Client.ApiHawk.ClientApi.RomLoaded">
            <summary>
            Occurs when a ROM is succesfully loaded
            </summary>
        </member>
        <member name="E:BizHawk.Client.ApiHawk.ClientApi.StateLoaded">
            <summary>
            Occurs when a savestate is sucessfully loaded
            </summary>
        </member>
        <member name="E:BizHawk.Client.ApiHawk.ClientApi.StateSaved">
            <summary>
            Occurs when a savestate is successfully saved
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.#cctor">
            <summary>
            Static stuff initilization
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.DoFrameAdvance">
            <summary>
            THE FrameAdvance stuff
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.DoFrameAdvanceAndUnpause">
            <summary>
            THE FrameAdvance stuff
            Auto unpause emulation
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.GetInput(System.Int32)">
            <summary>
            Gets a <see cref="T:BizHawk.Client.ApiHawk.Joypad"/> for specified player
            </summary>
            <param name="player">Player (one based) you want current inputs</param>
            <returns>A <see cref="T:BizHawk.Client.ApiHawk.Joypad"/> populated with current inputs</returns>
            <exception cref="T:System.IndexOutOfRangeException">Raised when you specify a player less than 1 or greater than maximum allows (see SystemInfo class to get this information)</exception>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.LoadState(System.String)">
            <summary>
            Load a savestate specified by its name
            </summary>
            <param name="name">Savetate friendly name</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.OnBeforeQuickLoad(System.Object,System.String,System.Boolean@)">
            <summary>
            Raised before a quickload is done (just after pressing shortcut button)
            </summary>
            <param name="sender">Object who raised the event</param>
            <param name="quickSaveSlotName">Slot used for quickload</param>
            <param name="eventHandled">A boolean that can be set if users want to handle save themselves; if so, BizHawk won't do anything</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.OnBeforeQuickSave(System.Object,System.String,System.Boolean@)">
            <summary>
            Raised before a quicksave is done (just after pressing shortcut button)
            </summary>
            <param name="sender">Object who raised the event</param>
            <param name="quickSaveSlotName">Slot used for quicksave</param>
            <param name="eventHandled">A boolean that can be set if users want to handle save themselves; if so, BizHawk won't do anything</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.OnStateLoaded(System.Object,System.String)">
            <summary>
            Raise when a state is loaded
            </summary>
            <param name="sender">Object who raised the event</param>
            <param name="stateName">User friendly name for saved state</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.OnStateSaved(System.Object,System.String)">
            <summary>
            Raise when a state is saved
            </summary>
            <param name="sender">Object who raised the event</param>
            <param name="stateName">User friendly name for saved state</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.OnRomLoaded">
            <summary>
            Raise when a rom is successfully Loaded
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.SaveState(System.String)">
            <summary>
            Save a state with specified name
            </summary>
            <param name="name">Savetate friendly name</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.SetExtraPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the extra padding added to the 'native' surface so that you can draw HUD elements in predictable placements
            </summary>
            <param name="left">Left padding</param>
            <param name="top">Top padding</param>
            <param name="right">Right padding</param>
            <param name="bottom">Bottom padding</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.SetExtraPadding(System.Int32)">
            <summary>
            Sets the extra padding added to the 'native' surface so that you can draw HUD elements in predictable placements
            </summary>
            <param name="left">Left padding</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.SetExtraPadding(System.Int32,System.Int32)">
            <summary>
            Sets the extra padding added to the 'native' surface so that you can draw HUD elements in predictable placements
            </summary>
            <param name="left">Left padding</param>
            <param name="top">Top padding</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.SetExtraPadding(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the extra padding added to the 'native' surface so that you can draw HUD elements in predictable placements
            </summary>
            <param name="left">Left padding</param>
            <param name="top">Top padding</param>
            <param name="right">Right padding</param>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.SetInput(System.Int32,BizHawk.Client.ApiHawk.Joypad)">
            <summary>
            Set inputs in specified <see cref="T:BizHawk.Client.ApiHawk.Joypad"/> to specified player
            </summary>
            <param name="player">Player (one based) whom inputs must be set</param>
            <param name="joypad"><see cref="T:BizHawk.Client.ApiHawk.Joypad"/> with inputs</param>
            <exception cref="T:System.IndexOutOfRangeException">Raised when you specify a player less than 1 or greater than maximum allows (see SystemInfo class to get this information)</exception>
            <remarks>Still have some strange behaviour with multiple inputs; so this feature is still in beta</remarks>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.UnpauseEmulation">
            <summary>
            Resume the emulation
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ClientApi.GetAllInputs">
            <summary>
            Gets all current inputs for each joypad and store
            them in <see cref="T:BizHawk.Client.ApiHawk.Joypad"/> class collection
            </summary>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.ClientApi.RunningSystem">
            <summary>
            Gets current emulated system
            </summary>
        </member>
        <member name="T:BizHawk.Client.ApiHawk.ExternalToolManager">
            <summary>
            This static class handle all ExternalTools
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ExternalToolManager.#cctor">
            <summary>
            Initilization
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ExternalToolManager.BuildToolStrip">
            <summary>
            Build the toolstrip menu
            </summary>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ExternalToolManager.GenerateToolTipFromFileName(System.String)">
            <summary>
            Generate a <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> from an
            external tool dll.
            The assembly must have <see cref="T:BizHawk.Client.ApiHawk.BizHawkExternalToolAttribute"/> in its
            assembly attributes
            </summary>
            <param name="fileName">File that will be reflected</param>
            <returns>A new <see cref="T:System.Windows.Forms.ToolStripMenuItem"/>; assembly path can be found in the Tag property</returns>
            <remarks>For the moment, you could only load a dll that have a form (which implements <see cref="T:BizHawk.Client.EmuHawk.IExternalToolForm"/>)</remarks>
        </member>
        <member name="M:BizHawk.Client.ApiHawk.ExternalToolManager.DirectoryMonitor_Created(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            This event is raised when we add a dll file into
            the external tools path.
            It will automatically load the assembly and add it into the list
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:BizHawk.Client.ApiHawk.ExternalToolManager.ToolStripMenu">
            <summary>
            Gets a prebuild <see cref="T:System.Windows.Forms.ToolStripMenuItem"/>
            This list auto-updated by the <see cref="T:BizHawk.Client.ApiHawk.ExternalToolManager"/> itself
            </summary>
        </member>
        <member name="T:BizHawk.Client.EmuHawk.IExternalToolForm">
            <summary>
            Interface to implements in order to make a custom tool
            </summary>
        </member>
    </members>
</doc>
